{"version":3,"sources":["logo.svg","components/Cards/Cards.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","option","legend","display","title","text","useStyles","makeStyles","theme","formControl","margin","minWidth","selectEmpty","marginTop","CountryPicker","handleCountryChange","React","classes","fetchedCountries","setfetchCountries","FormControl","Select","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","covidImage","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.05e3a2e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__15kcU\",\"card\":\"Cards_card__3McFK\",\"infected\":\"Cards_infected__31_4K\",\"recovered\":\"Cards_recovered__3AtyG\",\"deaths\":\"Cards_deaths__2mD9s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__KJQvC\"};","import React from 'react'\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\r\nimport styles from './Cards.module.css'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return 'Loading..'\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> Infected </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant=\"body2\" > Number of active cases from COVID-19 </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> Infected </Typography>\r\n                        <Typography variant=\"h5\">  <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" />  </Typography>\r\n                        <Typography color=\"textSecondary\" > {new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant=\"body2\" > Number of recoveries cases from COVID-19 </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> Infected </Typography>\r\n                        <Typography variant=\"h5\"> <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" /> </Typography>\r\n                        <Typography color=\"textSecondary\" > {new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant=\"body2\" > Number of deaths caused from COVID-19 </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\nexport default Cards;","import axios from 'axios'\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if (country) {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n        // const modifiedData={\r\n        //     confirmed:data.confirmed,\r\n        //     recovered:data.recovered,\r\n        //     deaths:data.deaths,\r\n        //     lastUpdate:data.lastUpdate,\r\n        // }\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        // console.log(response);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n        return modifiedData;\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n        //console.log(data);\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { fetchDailyData } from '../../api'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\nimport styles from './Chart.module.css'\r\nconst Chart = ({data:{confirmed,recovered,deaths},country}) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n       // console.log(dailyData);\r\n        fetchApi();\r\n    },[]);\r\n\r\n    const lineChart = (\r\n        dailyData.length ?\r\n            (\r\n                <Line\r\n                    data={{\r\n                        labels: dailyData.map(({date})=>date), // map\r\n                        datasets: [{\r\n                              data:dailyData.map(({confirmed})=>confirmed),\r\n                              label:'Infected',\r\n                              borderColor:'#3333ff',\r\n                              fill:true,\r\n                        }, {\r\n                            data:dailyData.map(({deaths})=>deaths),\r\n                              label:'Deaths',\r\n                              borderColor:'red',\r\n                              backgroundColor:'rgba(255,0,0,0.5)',\r\n                              fill:true,\r\n\r\n                        }]\r\n                    }}\r\n                />\r\n            ) : null\r\n    );\r\n\r\n    const barChart=(\r\n        confirmed\r\n        ?(\r\n            <Bar\r\n            data={{\r\n                labels:['Infected','Confirmed','Deaths'],\r\n                datasets:[{\r\n                    label:'People',\r\n                    backgroundColor:[\r\n                        'rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)'\r\n                    ],\r\n                    data:[confirmed.value,recovered.value,deaths.value]\r\n                }]\r\n\r\n\r\n            }}\r\n            option={{\r\n                legend:{display:false},\r\n                title:{display:true,text:`Current state in ${country}`},\r\n            }}\r\n            \r\n            />\r\n        ):null\r\n    )\r\n    return (\r\n       <div className={styles.container}>\r\n        {country ? barChart :lineChart}\r\n       </div>\r\n    )\r\n}\r\nexport default Chart;","import React ,{useState,useEffect} from 'react'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport styles from './CountryPicker.module.css'\r\nimport {fetchCountries} from '../../api'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 150,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  }));\r\nconst CountryPicker =({handleCountryChange})=>{\r\n    const [age, setAge] = React.useState('Global');\r\n    const classes = useStyles();\r\n\r\n    const [fetchedCountries,setfetchCountries]=useState([]);\r\n\r\n    useEffect(()=>{\r\n      const fetchApi=async()=>{\r\n          setfetchCountries(await fetchCountries());\r\n      }\r\n      fetchApi();\r\n    },[setfetchCountries]);\r\n    console.log(fetchedCountries)\r\n\r\n\r\n    return(\r\n       <FormControl className={classes.formControl}>\r\n           <Select defaultValue='' onChange={(e)=>handleCountryChange(e.target.value)}>\r\n             <option value='' >Global</option>\r\n             {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\r\n           </Select>\r\n       </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Cards from './components/Cards/Cards'\nimport Chart from './components/Chart/Chart'\nimport CountryPicker from './components/CountryPicker/CountryPicker'\nimport styles from './App.module.css'\nimport {fetchData} from './api'\nimport covidImage from './images/image.png'\nclass App extends React.Component {\n\n  state={\n    data:{},\n    country:'',\n  }\n\n  async componentDidMount()\n  {\n    const fetchedData = await fetchData();\n    this.setState({data:fetchedData});\n  //  console.log(fetchedData);\n  }\n  handleCountryChange= async(country)=>{\n    const fetchedData = await fetchData(country);\n    this.setState({data:fetchedData,country:country});\n\n    console.log(('dfdf '+ country))\n  }\n render(){\n\n  const {data,country}=this.state;\n  return (\n    <div className={styles.container}>\n     <img className={styles.image} src={covidImage} alt=\"COVID-19\"/>\n     <Cards data={data}/>\n     <CountryPicker handleCountryChange={this.handleCountryChange}/>\n     <Chart data={data} country={country}/>\n    \n    </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2Ufjd\",\"image\":\"App_image__1RZJi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1AkXB\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}